{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","map","Map","Square","props","image","get","value","src","width","height","set","Board","handleClick","squares","state","slice","console","log","setState","renderButton","onClick","i","push","this","id","renderSquare","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+OAAe,I,MCwBAA,ICZAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDd,SAASQ,EAAQC,GAIf,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAGT,IAAIQ,EAAM,IAAIC,IA4Bd,SAASC,EAAOC,GACV,IAAMC,EAAQJ,EAAIK,IAAIF,EAAMG,OAC5B,OAAQ,6BAAI,qBAAKC,IAAKH,EAAOI,MAAM,MAAMC,OAAO,UA5BtDT,EAAIU,IAAI,EAAG,oBACXV,EAAIU,IAAI,EAAG,sBACXV,EAAIU,IAAI,EAAG,oBACXV,EAAIU,IAAI,EAAG,wBACXV,EAAIU,IAAI,EAAG,sBACXV,EAAIU,IAAI,EAAG,uBACXV,EAAIU,IAAI,EAAG,uBACXV,EAAIU,IAAI,EAAG,oBACXV,EAAIU,IAAI,EAAG,mBACXV,EAAIU,IAAI,GAAI,sBACZV,EAAIU,IAAI,GAAI,qBACZV,EAAIU,IAAI,GAAI,qBACZV,EAAIU,IAAI,GAAI,oBACZV,EAAIU,IAAI,GAAI,mBACZV,EAAIU,IAAI,GAAI,mBACZV,EAAIU,IAAI,GAAI,sBACZV,EAAIU,IAAI,GAAI,qBACZV,EAAIU,IAAI,GAAI,uBACZV,EAAIU,IAAI,GAAI,sBACZV,EAAIU,IAAI,GAAI,sBACZV,EAAIU,IAAI,GAAI,mBACZV,EAAIU,IAAI,GAAI,sBACZV,EAAIU,IAAI,GAAI,2BACZV,EAAIU,IAAI,GAAI,uBACZV,EAAIU,IAAI,GAAI,oB,IAQNC,E,kDACF,WAAYR,GAAQ,IAAD,uBACf,cAAMA,IAWVS,YAAc,WACZ,IAAMC,EAAU,EAAKC,MAAMD,QAAQE,QACnCxB,EAAQsB,GACRG,QAAQC,IAAI,kBAAoBJ,GAEhC,EAAKK,SACH,CAACL,QAASA,KAlBK,EAsBnBM,aAAe,WACb,OAAO,wBAAQC,QAAS,EAAKR,YAAtB,8BApBL,IADA,IAAIC,EAAU,GACLQ,EAAI,EAAGA,GAAK,GAAIA,IACvBR,EAAQS,KAAKD,GAJA,OAMf9B,EAAQsB,GACR,EAAKC,MAAQ,CACTD,QAASA,GARE,E,yDA0BNQ,GACT,OAAO,cAACnB,EAAD,CACPI,MAAOiB,KAAKT,MAAMD,QAAQQ,O,+BAK1B,OACA,sBAAKG,GAAG,QAAR,UACI,kCACA,+BACGD,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,+BACGF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,+BACGF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,OAErB,+BACGF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,OAErB,+BACGF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,IAClBF,KAAKE,aAAa,UAGvB,8BACKF,KAAKJ,wB,GA1EAO,IAAMC,WAiF1BC,IAASC,OAAO,cAAC,EAAD,IAAWC,SAASC,eAAe,SAKnDjD,M","file":"static/js/main.940222e1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nvar map = new Map();\n\nmap.set(1, \"images/76ers.png\");\nmap.set(2, \"images/blazers.png\");\nmap.set(3, \"images/bucks.png\");\nmap.set(4, \"images/cavaliers.png\");\nmap.set(5, \"images/celtics.png\");\nmap.set(6, \"images/clippers.png\");\nmap.set(7, \"images/grizzles.png\");\nmap.set(8, \"images/hawks.png\");\nmap.set(9, \"images/heat.png\");\nmap.set(10, \"images/hornets.png\");\nmap.set(11, \"images/knicks.png\");\nmap.set(12, \"images/lakers.png\");\nmap.set(13, \"images/magic.png\");\nmap.set(14, \"images/mavs.png\");\nmap.set(15, \"images/nets.png\");\nmap.set(16, \"images/nuggets.png\");\nmap.set(17, \"images/pacers.png\");\nmap.set(18, \"images/pelicans.png\");\nmap.set(19, \"images/pistons.png\");\nmap.set(20, \"images/rockets.png\");\nmap.set(21, \"images/suns.png\");\nmap.set(22, \"images/thunder.png\");\nmap.set(23, \"images/timberwolves.png\");\nmap.set(24, \"images/warriors.png\");\nmap.set(25, \"images/bulls.png\");\n\nfunction Square(props){\n      const image = map.get(props.value);\n      return (<td><img src={image} width=\"200\" height=\"200\"></img></td>);\n    }\n  \n  \nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        var squares = [];\n        for (var i = 1; i <= 25; i++) {\n          squares.push(i);\n        }\n        shuffle(squares)\n        this.state = {\n            squares: squares\n        };\n    }\n\n    handleClick = () => {\n      const squares = this.state.squares.slice();\n      shuffle(squares)\n      console.log(\"after shuffle: \" + squares)\n\n      this.setState(\n        {squares: squares}\n      );\n    }\n\n    renderButton = () => {\n      return <button onClick={this.handleClick}>Shuffle images!</button>\n    }\n\n    renderSquare(i) {\n        return <Square \n        value={this.state.squares[i]}\n        />;\n    }\n\n    render() {\n        return (\n        <div id=\"board\">\n            <table>\n            <tr>\n              {this.renderSquare(0)}\n              {this.renderSquare(1)}\n              {this.renderSquare(2)}\n              {this.renderSquare(3)}\n              {this.renderSquare(4)}\n            </tr>\n            <tr>\n              {this.renderSquare(5)}\n              {this.renderSquare(6)}\n              {this.renderSquare(7)}\n              {this.renderSquare(8)}\n              {this.renderSquare(9)}\n            </tr>\n            <tr>\n              {this.renderSquare(10)}\n              {this.renderSquare(11)}\n              {this.renderSquare(12)}\n              {this.renderSquare(13)}\n              {this.renderSquare(14)}\n            </tr>\n            <tr>\n              {this.renderSquare(15)}\n              {this.renderSquare(16)}\n              {this.renderSquare(17)}\n              {this.renderSquare(18)}\n              {this.renderSquare(19)}\n            </tr>\n            <tr>\n              {this.renderSquare(20)}\n              {this.renderSquare(21)}\n              {this.renderSquare(22)}\n              {this.renderSquare(23)}\n              {this.renderSquare(24)}\n            </tr>\n          </table>\n          <div>\n              {this.renderButton()}\n          </div>\n        </div>\n        );\n    }\n}\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}